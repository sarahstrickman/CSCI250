   1 0000               # File:		build.asm
   2 0000               # Author:	K. Reek
   3 0000               # Contributors:	P. White,
   4 0000               #		W. Carithers,
   5 0000               #		Sarah Strickman
   6 0000               #
   7 0000               # Description:	Binary tree building functions.
   8 0000               #
   9 0000               # Revisions:	$Log$
  10 0000               
  11 0000               
  12 0000               	.text			# this is program code
  13 0000               	.align 2		# instructions must be on word boundaries
  14 0000               
  15 0000               # 
  16 0000               # Name:		add_elements
  17 0000               #
  18 0000               # Description:	loops through array of numbers, adding each (in order)
  19 0000               #		to the tree
  20 0000               #
  21 0000               # Arguments:	a0 the address of the array
  22 0000               #   		a1 the number of elements in the array
  23 0000               #		a2 the address of the root pointer
  24 0000               # Returns:	none
  25 0000               #
  26 0000               
  27 0000               	.globl	add_elements
  28 0000               	
  29 0000               add_elements:
  30 0000 23BDFFF0		addi 	$sp, $sp, -16
  31 0004 AFBF000C		sw 	$ra, 12($sp)
  32 0008 AFB20008		sw 	$s2, 8($sp)
  33 000c AFB10004		sw 	$s1, 4($sp)
  34 0010 AFB00000		sw 	$s0, 0($sp)
  35 0014               
  36 0014               #***** BEGIN STUDENT CODE BLOCK 1 ***************************
  37 0014               #
  38 0014               # Insert your code to iterate through the array, calling build_tree
  39 0014               # for each value in the array.  Remember that build_tree requires
  40 0014               # two parameters:  the address of the variable which contains the
  41 0014               # root pointer for the tree, and the number to be inserted.
  42 0014               #
  43 0014               # Feel free to save extra "S" registers onto the stack if you need
  44 0014               # more for your function.
  45 0014               #
  46 0014                       .globl  allocate_mem
  47 0014               
  48 0014               
  49 0014               
  50 0014 00808020	        add     $s0, $a0, $zero                 # s0 = addr of array
  51 0018 00A09020	        add     $s2, $a1, $zero                 # s2 = array length
  52 001c 00008820	        add     $s1, $zero, $zero               # s1 = index in the array
  53 0020               
  54 0020                       
  55 0020 8CC80000	        lw      $t0, 0($a2)
  56 0024 01002020	        add     $a0, $t0, $zero                 # a0 has addr of tree root
  57 0028               
  58 0028               loop_add_elements:
  59 0028 0232C82A	        slt     $t9, $s1, $s2                   # If you have reached the end
  60 002c 13200006	        beq     $t9, $zero, done_add_elements   # of the array, stop.
  61 0030               
  62 0030 8E080000	        lw      $t0, 0($s0)                     # get the item in the array
  63 0034 01002820	        add     $a1, $t0, $zero                 # a1 will have the number to
  64 0038                                                               # put into the tree.
  65 0038 0C00001C	        jal build_tree
  66 003c                      
  67 003c 22310001	        addi    $s1, $s1, 1                     # increment counter and your
  68 0040 22100004	        addi    $s0, $s0, 4                     # space in memory of the array.
  69 0044 0800000A	        j       loop_add_elements
  70 0048               
  71 0048               done_add_elements:
  72 0048 ACC40000	        sw      $a0, 0($a2)                     # head of tree is stored in a2 again
  73 004c 02002020	        add     $a0, $s0, $zero                 # restore a0 and a1
  74 0050 02402820	        add     $a1, $s2, $zero
  75 0054 02392022	        sub     $a0, $s1, $t9                   # move a0 back the beginning
  76 0058                                                               # of the array
  77 0058               
  78 0058               #
  79 0058               # If you saved extra "S" reg to stack, make sure you restore them
  80 0058               #
  81 0058               
  82 0058               #***** END STUDENT CODE BLOCK 1 *****************************
  83 0058               
  84 0058               add_done:
  85 0058               
  86 0058 8FBF000C		lw 	$ra, 12($sp)
  87 005c 8FB20008		lw 	$s2, 8($sp)
  88 0060 8FB10004		lw 	$s1, 4($sp)
  89 0064 8FB00000		lw 	$s0, 0($sp)
  90 0068 23BD0010		addi 	$sp, $sp, 16
  91 006c 03E00008		jr 	$ra
  92 0070               
  93 0070               #***** BEGIN STUDENT CODE BLOCK 2 ***************************
  94 0070               #
  95 0070               # Put your build_tree subroutine here.
  96 0070               #
  97 0070               
  98 0070               # 
  99 0070               # Name:		build_tree
 100 0070               #
 101 0070               # Description:	Adds a single element into the binary search tree
 102 0070               #
 103 0070               # Arguments:	a0 : the address of the tree's root
 104 0070               #               a1 : the number to put into the tree
 105 0070               #
 106 0070               # Returns:	none
 107 0070               #
 108 0070               build_tree:
 109 0070 23BDFFD8	        addi    $sp, $sp, -40                   # allocate sp
 110 0074 AFBF0020	        sw      $ra, 32($sp)                    # store return addr
 111 0078 AFB7001C	        sw      $s7, 28($sp)                    # store s registers
 112 007c AFB60018	        sw      $s6, 24($sp)
 113 0080 AFB50014	        sw      $s5, 20($sp)
 114 0084 AFB40010	        sw      $s4, 16($sp)
 115 0088 AFB3000C	        sw      $s3, 12($sp)
 116 008c AFB20008	        sw      $s2, 8($sp)
 117 0090 AFB10004	        sw      $s1, 4($sp)
 118 0094 AFB00000	        sw      $s0, 0($sp)
 119 0098               
 120 0098 00808020	        add     $s0, $a0, $zero                 # store a0 and a1
 121 009c 00A08820	        add     $s1, $a1, $zero
 122 00a0               
 123 00a0 12000010	        beq     $s0, $zero, build_new_node      # if root is null, build 
 124 00a4                                                               # new node
 125 00a4               
 126 00a4 8E120000	        lw      $s2, 0($s0)                     # get value at current node
 127 00a8               
 128 00a8 12320015	        beq     $s1, $s2, done_build            # if current val is = val in
 129 00ac                                                               # node, don't do anything
 130 00ac                                                               # (tree can't have duplicates)
 131 00ac               
 132 00ac 0232C82A	        slt     $t9, $s1, $s2                   # if s1 < s2, recurse left
 133 00b0 17200002	        bne     $t9, $zero, build_left
 134 00b4               
 135 00b4 0251C82A	        slt     $t9, $s2, $s1                   # if s1 > s2, recurse right
 136 00b8 17200005	        bne     $t9, $zero, build_right
 137 00bc               
 138 00bc               build_left:
 139 00bc 8E040004	        lw      $a0, 4($s0)                     # a0 points to left tree
 140 00c0                       
 141 00c0 0C00001C	        jal     build_tree                      # call build_tree on the left
 142 00c4                                                               # branch.
 143 00c4                                                               
 144 00c4 AE040004	        sw      $a0, 4($s0)                     # store root of edited tree
 145 00c8                                                               # back into left side
 146 00c8               
 147 00c8 02002020	        add     $a0, $s0, $zero                 # a0 = original root
 148 00cc               
 149 00cc 08000040	        j done_build
 150 00d0               
 151 00d0               build_right:
 152 00d0 8E040008	        lw      $a0, 8($s0)                     # a0 points to right tree
 153 00d4               
 154 00d4 0C00001C	        jal     build_tree                      # call build_tree on the right
 155 00d8                                                               # branch
 156 00d8               
 157 00d8 AE040008	        sw      $a0, 8($s0)                     # store root of edited tree
 158 00dc                                                               # back into right side
 159 00dc               
 160 00dc 02002020	        add     $a0, $s0, $zero                 # a0 = original root
 161 00e0               
 162 00e0               
 163 00e0 08000040	        j done_build
 164 00e4               
 165 00e4               build_new_node:
 166 00e4 34040003	        li      $a0, 3                          # allocate 3 words: one for
 167 00e8                                                               # left, right, value
 168 00e8               
 169 00e8 0C000000	        jal     allocate_mem                    # v0 will now have the 
 170 00ec                                                               # addr of the memory
 171 00ec                       
 172 00ec AC510000	        sw      $s1, 0($v0)                     # set val, left, and right
 173 00f0 AC400004	        sw      $zero, 4($v0)                   # of newly created node
 174 00f4 AC400008	        sw      $zero, 8($v0)
 175 00f8               
 176 00f8 00402020	        add     $a0, $v0, $zero                 # a0 points to new node
 177 00fc               
 178 00fc 08000040	        j done_build
 179 0100               
 180 0100               done_build:
 181 0100               
 182 0100 8FB00000	        lw      $s0, 0($sp)                     # restore s registers
 183 0104 8FB10004	        lw      $s1, 4($sp)
 184 0108 8FB20008	        lw      $s2, 8($sp)
 185 010c 8FB3000C	        lw      $s3, 12($sp)
 186 0110 8FB40010	        lw      $s4, 16($sp)
 187 0114 8FB50014	        lw      $s5, 20($sp)
 188 0118 8FB60018	        lw      $s6, 24($sp)
 189 011c 8FB7001C	        lw      $s7, 28($sp)
 190 0120 8FBF0020	        lw      $ra, 32($sp)                    # restore ra
 191 0124 23BD0028	        addi    $sp, $sp, 40                    # move stack ptr back
 192 0128 03E00008	        jr      $ra                             # return
 193 012c               
 194 012c               #***** END STUDENT CODE BLOCK 2 *****************************


add_done             00000058 R  text 
add_elements         00000000 RG text 
allocate_mem         ******** XG
build_left           000000BC R  text 
build_new_node       000000E4 R  text 
build_right          000000D0 R  text 
build_tree           00000070 R  text 
done_add_elements    00000048 R  text 
done_build           00000100 R  text 
loop_add_elements    00000028 R  text 
