   1 0000               # File:		add_strings.asm
   2 0000               # Author:	K. Reek
   3 0000               # Contributors:	P. White, W. Carithers
   4 0000               #
   5 0000               # Description:	Experiment 2
   6 0000               #		This program adds variable length of numbers by
   7 0000               #		performing arithmetic on the ASCII digits themselves.
   8 0000               #
   9 0000               # Updates:
  10 0000               #		3/2004	M. Reek, named constants
  11 0000               #		10/2007 W. Carithers, alignment
  12 0000               #		09/2009 W. Carithers, separate assembly
  13 0000               
  14 0000               #
  15 0000               # Name:		Constant definitions
  16 0000               #
  17 0000               # Description:	These constants define values used for system calls,
  18 0000               #		and some other miscellaneous values.
  19 0000               #
  20 0000               
  21 0000               # Constants for system calls
  22 0000               #
  23 0000               PRINT_INT       = 1             # code for syscall to print integer
  24 0000               PRINT_STRING    = 4             # code for syscall to print a string
  25 0000               READ_INT        = 5             # code for syscall to read an integer
  26 0000               
  27 0000               #
  28 0000               # Name:		Data areas
  29 0000               #
  30 0000               # Description:	Much of the data for the program is here, including
  31 0000               #		the ASCII digit strings to be added, the buffers
  32 0000               #		into which the results are stored, and some of the
  33 0000               #		strings used to identify the output.
  34 0000               #
  35 0000               
  36 0000               #
  37 0000               # The ASCII digit strings to be adding
  38 0000               #
  39 0000               	.data
  40 0000               	.align 0
  41 0000               
  42 0000 3500    	str_a1:	.asciiz	"5"
  43 0002               
  44 0002 3100    	str_a2:	.asciiz	"1"
  45 0004               
  46 0004 31323334	str_a3: .asciiz "1234"
          00      
  47 0009 30303030	str_a4: .asciiz "0000"
          00      
  48 000e 30303031	str_a5: .asciiz "0001"
          00      
  49 0013 30323335	str_a6: .asciiz "0235"
          00      
  50 0018               
  51 0018               #		 ----+----1
  52 0018 39393939	str_b1:	.asciiz	"9999999999"
          39393939
          393900  
  53 0023               
  54 0023 31323334	str_b2:	.asciiz	"1234567890"
          35363738
          393000  
  55 002e               
  56 002e 35353535	str_b3:	.asciiz	"5555555555"
          35353535
          353500  
  57 0039               
  58 0039               #
  59 0039               # Buffers into which the sums will be stored.  These have text
  60 0039               # defined both before and after them to assist in printing the
  61 0039               # sum and to ensure that it does not spill out of the alotted space.
  62 0039               #
  63 0039 52657375	out_a:	.ascii	"Result..........."
          6C742E2E
          2E2E2E2E
          2E2E2E2E
          2E      
  64 004a 202E    	buf_a:	.ascii	" ."
  65 004c 0A200A00		.asciiz	"\n \n"
  66 0050               
  67 0050 52657375	out_a2:	.ascii	"Result..........."
          6C742E2E
          2E2E2E2E
          2E2E2E2E
          2E      
  68 0061 20202020	buf_a2:	.ascii	"    ."
          2E      
  69 0066 0A200A00		.asciiz	"\n \n"
  70 006a               
  71 006a 52657375	out_b:	.ascii	"Result..........."
          6C742E2E
          2E2E2E2E
          2E2E2E2E
          2E      
  72 007b               #		 ----+----1
  73 007b 20202020	buf_b:	.ascii	"          ."
          20202020
          20202E  
  74 0086 0A200A00		.asciiz	"\n \n"
  75 008a               
  76 008a 52657375	out_b2:	.ascii	"Result..........."
          6C742E2E
          2E2E2E2E
          2E2E2E2E
          2E      
  77 009b               #		 ----+----1
  78 009b 20202020	buf_b2:	.ascii	"          ."
          20202020
          20202E  
  79 00a6 0A200A00		.asciiz	"\n \n"
  80 00aa               
  81 00aa               #
  82 00aa               # Strings used to identify the results when they are printed
  83 00aa               #
  84 00aa               result1:
  85 00aa 46697273		.asciiz	"First operand...."
          74206F70
          6572616E
          642E2E2E
          2E00    
  86 00bc               
  87 00bc               result2:
  88 00bc               #	.ascii	"."
  89 00bc               #	.ascii	"\n"
  90 00bc 2E0A5365		.asciiz	".\nSecond operand..."
          636F6E64
          206F7065
          72616E64
          2E2E2E00
  91 00d0               
  92 00d0               result3:
  93 00d0               #	.ascii	"."
  94 00d0 2E0A00  		.asciiz	".\n"
  95 00d3               
  96 00d3               #
  97 00d3               # Name:		Main program
  98 00d3               #
  99 00d3               # Description:	Main controlling logic for the program.  The
 100 00d3               #		parameter block for each problem is passed,
 101 00d3               #		one by one, to a routine that does the work.
 102 00d3               #
 103 0000               	.text				# this is program code
 104 0000               	.align	2			# code must be on word boundaries
 105 0000               	.globl	main			# main is a global label
 106 0000               	.globl  sub_ascii_numbers	# external function we call
 107 0000               
 108 0000               main:
 109 0000               M_FRAMESIZE = 8
 110 0000 23BDFFF8		addi 	$sp, $sp, -M_FRAMESIZE	# allocate space for the return address
 111 0004 AFBF0004		sw 	$ra, -4+M_FRAMESIZE($sp)# store the ra on the stack
 112 0008               	
 113 0008 3C040000		la	$a0, problem1	# Address of parameters for 
     000c 34840000
 114 0010 0C00001D		jal	do_problem	#   problem 1, and do it.
 115 0014               
 116 0014 3C040000		la	$a0, problem1a
     0018 34840000
 117 001c 0C00001D		jal	do_problem
 118 0020               
 119 0020 3C040000		la	$a0, problem1b
     0024 34840000
 120 0028 0C00001D		jal	do_problem
 121 002c               
 122 002c 3C040000		la	$a0, problem1c
     0030 34840000
 123 0034 0C00001D		jal	do_problem
 124 0038               
 125 0038 3C040000		la	$a0, problem2a
     003c 34840000
 126 0040 0C00001D		jal	do_problem
 127 0044               
 128 0044 3C040000		la	$a0, problem2b
     0048 34840000
 129 004c 0C00001D		jal	do_problem
 130 0050               
 131 0050 3C190000		la	$t9, buf_b	# fixing up buf_b to use as input
     0054 37390000
 132 0058 A320000A		sb	$zero, 10($t9)	# put a <null> at end of buf_b
 133 005c               
 134 005c 3C040000		la	$a0, problem2c
     0060 34840000
 135 0064 0C00001D		jal	do_problem
 136 0068               
 137 0068               #
 138 0068               # All done -- exit the program!
 139 0068               #
 140 0068 8FBF0004		lw 	$ra, -4+M_FRAMESIZE($sp)	# restore the ra
 141 006c 23BD0008		addi 	$sp, $sp, M_FRAMESIZE  	# deallocate stack space 
 142 0070 03E00008		jr 	$ra			# return from main and exit spim
 143 0074               	
 144 0074               
 145 0074               #
 146 0074               # Name:		Parameter blocks defining the addition problems
 147 0074               #
 148 0074               # Description:	These are the parameter blocks that define each of the
 149 0074               #		addition problems.  Each block includes addresses of
 150 0074               #		the two strings and the output buffer, and the length
 151 0074               #		of these three areas (they are all the same length).
 152 0074               #		Each block then contains the address and length needed
 153 0074               #		to print the result, though these last two values are
 154 0074               #		unused by the addition routine itself.
 155 0074               #
 156 00d3               	.data
 157 00d3 00      		.align	2
 158 00d4               
 159 00d4               problem1:
 160 00d4 00000000		.word	str_a1		# First number
 161 00d8 00000002		.word	str_a2		# Second number
 162 00dc 0000004A		.word	buf_a		# Place to store the result
 163 00e0 00000001		.word	1		# Length of both numbers and result buf
 164 00e4 00000039		.word	out_a		# Where to start printing the answer
 165 00e8               
 166 00e8               problem1a:
 167 00e8 00000004		.word	str_a3, str_a4, buf_a2, 4, out_a2
     00ec 00000009
     00f0 00000061
     00f4 00000004
     00f8 00000050
 168 00fc               
 169 00fc               problem1b:
 170 00fc 00000004		.word	str_a3, str_a5, buf_a2, 4, out_a2
     0100 0000000E
     0104 00000061
     0108 00000004
     010c 00000050
 171 0110               
 172 0110               problem1c:
 173 0110 00000004		.word	str_a3, str_a6, buf_a2, 4, out_a2
     0114 00000013
     0118 00000061
     011c 00000004
     0120 00000050
 174 0124               
 175 0124               problem2a:
 176 0124 00000018		.word	str_b1, str_b2, buf_b, 10, out_b
     0128 00000023
     012c 0000007B
     0130 0000000A
     0134 0000006A
 177 0138               
 178 0138               problem2b:
 179 0138 0000002E		.word	str_b3, str_b2, buf_b, 10, out_b
     013c 00000023
     0140 0000007B
     0144 0000000A
     0148 0000006A
 180 014c               #	.word	str_b2, str_b3, buf_b, 10, out_b
 181 014c               
 182 014c               problem2c:
 183 014c 0000002E		.word	str_b3, buf_b, buf_b2, 10, out_b2
     0150 0000007B
     0154 0000009B
     0158 0000000A
     015c 0000008A
 184 0160               
 185 0160               #
 186 0160               # Name:		do_problem
 187 0160               #
 188 0160               # Description:	Main logic for doing one individual problem.
 189 0160               # Arguments:	a0: address of the parameter block describing the problem.
 190 0160               #
 191 0160               
 192 0074               	.text 			#begin subroutine code
 193 0074               do_problem:
 194 0074               DO_FRAMESIZE = 16
 195 0074 23BDFFF0		addi 	$sp, $sp, -DO_FRAMESIZE 
 196 0078 AFBF000C		sw 	$ra, -4+DO_FRAMESIZE($sp)	# store the ra on the stack
 197 007c AFB00008		sw 	$s0, -8+DO_FRAMESIZE($sp)	# store the s0 on the stack
 198 0080               	
 199 0080               #
 200 0080               # Print the original values
 201 0080               #
 202 0080               
 203 0080 00808021		move	$s0, $a0		# copy the loc of the parm block to s0
 204 0084               
 205 0084               #
 206 0084               # call the sub_ascii_numbers subroutine to do the subtraction.
 207 0084               # The address of the parameter block is in s0.
 208 0084               # doing this first, so that if they mess up the inputs, we will see
 209 0084               #
 210 0084               
 211 0084 02002021		move	$a0, $s0		# set up argument for function
 212 0088 0C000000		jal	sub_ascii_numbers
 213 008c               
 214 008c 34020004		li 	$v0, PRINT_STRING 	# print 1st number label	
 215 0090 3C040000		la 	$a0, result1
     0094 34840000
 216 0098 0000000C		syscall
 217 009c               
 218 009c 34020004		li 	$v0, PRINT_STRING	# print 1st number	
 219 00a0 8E040000		lw 	$a0, 0($s0)
 220 00a4 0000000C		syscall
 221 00a8               
 222 00a8 34020004		li 	$v0, PRINT_STRING	# print 2nd number label	
 223 00ac 3C040000		la 	$a0, result2
     00b0 34840000
 224 00b4 0000000C		syscall
 225 00b8               
 226 00b8 34020004		li 	$v0, PRINT_STRING	# print 2nd number	
 227 00bc 8E040004		lw 	$a0, 4($s0)
 228 00c0 0000000C		syscall
 229 00c4               
 230 00c4               
 231 00c4 34020004		li 	$v0, PRINT_STRING	# print newline at end	
 232 00c8 3C040000		la 	$a0, result3
     00cc 34840000
 233 00d0 0000000C		syscall
 234 00d4               
 235 00d4               #
 236 00d4               # Now, call the sub_ascii_numbers subroutine to do the subtraction.
 237 00d4               # The address of the parameter block is still in s0.
 238 00d4               #
 239 00d4               
 240 00d4               #	move	$a0, $s0		# set up argument for function
 241 00d4               #	jal	sub_ascii_numbers
 242 00d4               
 243 00d4               #
 244 00d4               # Print the result
 245 00d4               #
 246 00d4               
 247 00d4 34020004		li 	$v0, PRINT_STRING	# print answer	
 248 00d8 8E040010		lw 	$a0, 16($s0)
 249 00dc 0000000C		syscall
 250 00e0               
 251 00e0               #
 252 00e0               # Return to the calling program.
 253 00e0               #
 254 00e0 8FB00008		lw 	$s0, -8+DO_FRAMESIZE($sp)	# restore s0
 255 00e4 8FBF000C		lw 	$ra, -4+DO_FRAMESIZE($sp)	# restore ra
 256 00e8 23BD0010		addi 	$sp, $sp, DO_FRAMESIZE		# deallocate stack space 
 257 00ec 03E00008		jr	$ra


DO_FRAMESIZE       = 00000010   
M_FRAMESIZE        = 00000008   
PRINT_INT          = 00000001   
PRINT_STRING       = 00000004   
READ_INT           = 00000005   
buf_a                0000004A R  data 
buf_a2               00000061 R  data 
buf_b                0000007B R  data 
buf_b2               0000009B R  data 
do_problem           00000074 R  text 
main                 00000000 RG text 
out_a                00000039 R  data 
out_a2               00000050 R  data 
out_b                0000006A R  data 
out_b2               0000008A R  data 
problem1             000000D4 R  data 
problem1a            000000E8 R  data 
problem1b            000000FC R  data 
problem1c            00000110 R  data 
problem2a            00000124 R  data 
problem2b            00000138 R  data 
problem2c            0000014C R  data 
result1              000000AA R  data 
result2              000000BC R  data 
result3              000000D0 R  data 
str_a1               00000000 R  data 
str_a2               00000002 R  data 
str_a3               00000004 R  data 
str_a4               00000009 R  data 
str_a5               0000000E R  data 
str_a6               00000013 R  data 
str_b1               00000018 R  data 
str_b2               00000023 R  data 
str_b3               0000002E R  data 
sub_ascii_numbers    ******** XG
