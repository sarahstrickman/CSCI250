   1 0000               # File:		sub_ascii_numbers.asm
   2 0000               # Author:	K. Reek
   3 0000               # Contributors:	P. White, W. Carithers
   4 0000               #		Sarah Strickman sxs4599
   5 0000               #
   6 0000               # Updates:
   7 0000               #		3/2004	M. Reek, named constants
   8 0000               #		10/2007 W. Carithers, alignment
   9 0000               #		09/2009 W. Carithers, separate assembly
  10 0000               #
  11 0000               # Description:	sub two ASCII numbers and store the result in ASCII.
  12 0000               #
  13 0000               # Arguments:	a0: address of parameter block.  The block consists of
  14 0000               #		four words that contain (in this order):
  15 0000               #
  16 0000               #			address of first input string
  17 0000               #			address of second input string
  18 0000               #			address where result should be stored
  19 0000               #			length of the strings and result buffer
  20 0000               #
  21 0000               #		(There is actually other data after this in the
  22 0000               #		parameter block, but it is not relevant to this routine.)
  23 0000               #
  24 0000               # Returns:	The result of the subtraction, in the buffer specified by
  25 0000               #		the parameter block.
  26 0000               #
  27 0000               
  28 0000               	.globl	sub_ascii_numbers
  29 0000               
  30 0000               sub_ascii_numbers:
  31 0000               A_FRAMESIZE = 40
  32 0000               
  33 0000               #
  34 0000               # Save registers ra and s0 - s7 on the stack.
  35 0000               #
  36 0000 23BDFFD8		addi 	$sp, $sp, -A_FRAMESIZE
  37 0004 AFBF0024		sw 	$ra, -4+A_FRAMESIZE($sp)
  38 0008 AFB7001C		sw 	$s7, 28($sp)
  39 000c AFB60018		sw 	$s6, 24($sp)
  40 0010 AFB50014		sw 	$s5, 20($sp)
  41 0014 AFB40010		sw 	$s4, 16($sp)
  42 0018 AFB3000C		sw 	$s3, 12($sp)
  43 001c AFB20008		sw 	$s2, 8($sp)
  44 0020 AFB10004		sw 	$s1, 4($sp)
  45 0024 AFB00000		sw 	$s0, 0($sp)
  46 0028               	
  47 0028               # ##### BEGIN STUDENT CODE BLOCK 1 #####
  48 0028                       
  49 0028 8C910000	        lw      $s1, 0($a0)             # s1 = address of minuend
  50 002c 8C920004	        lw      $s2, 4($a0)             # s2 = address of subtractahend
  51 0030 8C930008	        lw      $s3, 8($a0)             # s3 = address of difference
  52 0034 8C94000C	        lw      $s4, 12($a0)            # s4 = length of strings
  53 0038                       
  54 0038 02344820	        add     $t1, $s1, $s4           # t1 = addr of last index of minuend
  55 003c 2129FFFF	        addi    $t1, $t1, -1
  56 0040               
  57 0040 02545020	        add     $t2, $s2, $s4           # t2 = addr of last
  58 0044 214AFFFF	        addi    $t2, $t2, -1            #      index of subtractahend
  59 0048               
  60 0048 02745820	        add     $t3, $s3, $s4           # t3 = addr of last index of
  61 004c 216BFFFF	        addi    $t3, $t3, -1            #      difference
  62 0050               
  63 0050 02806020	        add     $t4, $s4, $zero         # counter for length of strings
  64 0054 0000B820	        add     $s7, $zero, $zero       # carry bit. 0 at first
  65 0058               
  66 0058               
  67 0058               subtract_loop:                          # loop to subtract and put into result
  68 0058                       # stop looping when all has been read
  69 0058 11800011	        beq     $t4, $zero, finish_function
  70 005c               
  71 005c 91390000	        lbu     $t9, 0($t1)             # t9 = char in minuend
  72 0060 91580000	        lbu     $t8, 0($t2)             # t8 = char in subtractahend
  73 0064                       
  74 0064 0337C822	        sub     $t9, $t9, $s7           # take carry bit into account
  75 0068 0000B820	        add     $s7, $zero, $zero       # reset carry bit
  76 006c               
  77 006c                       # do subtraction
  78 006c 03387822	        sub     $t7, $t9, $t8           # t7 = difference
  79 0070               
  80 0070 01E0682A	        slt     $t5, $t7, $zero
  81 0074 15A00007	        bne     $t5, $zero, borrow      # borrow if needed
  82 0078               
  83 0078               continue_subtraction:
  84 0078 21EF0030	        addi    $t7, $t7, 48            # add back ascii offset
  85 007c               
  86 007c A16F0000	        sb      $t7, 0($t3)             # store it in t3
  87 0080               
  88 0080 2129FFFF	        addi    $t1, $t1, -1            # move up 1 character in numbers\
  89 0084 214AFFFF	        addi    $t2, $t2, -1            # to the next number that hasn't been\
  90 0088 216BFFFF	        addi    $t3, $t3, -1            # seen or next empty space
  91 008c               
  92 008c 218CFFFF	        addi    $t4, $t4, -1            # decrement length counter
  93 0090               
  94 0090 08000016	        j subtract_loop
  95 0094               
  96 0094               
  97 0094               borrow:                                 # borrow from the character before
  98 0094 21EF000A	        addi    $t7, $t7, 10            # add 10 to difference
  99 0098 20170001	        addi    $s7, $zero, 1           # gotta carry again
 100 009c 0800001E	        j continue_subtraction 
 101 00a0               
 102 00a0               
 103 00a0               finish_function:
 104 00a0               
 105 00a0                        
 106 00a0               # ###### END STUDENT CODE BLOCK 1 ######
 107 00a0               
 108 00a0               #
 109 00a0               # Restore registers ra and s0 - s7 from the stack.
 110 00a0               #
 111 00a0 8FBF0024		lw 	$ra, -4+A_FRAMESIZE($sp)
 112 00a4 8FB7001C		lw 	$s7, 28($sp)
 113 00a8 8FB60018		lw 	$s6, 24($sp)
 114 00ac 8FB50014		lw 	$s5, 20($sp)
 115 00b0 8FB40010		lw 	$s4, 16($sp)
 116 00b4 8FB3000C		lw 	$s3, 12($sp)
 117 00b8 8FB20008		lw 	$s2, 8($sp)
 118 00bc 8FB10004		lw 	$s1, 4($sp)
 119 00c0 8FB00000		lw 	$s0, 0($sp)
 120 00c4 23BD0028		addi 	$sp, $sp, A_FRAMESIZE
 121 00c8               
 122 00c8 03E00008		jr	$ra			# Return to the caller.


A_FRAMESIZE           = 00000028   
borrow                  00000094 R  text 
continue_subtraction    00000078 R  text 
finish_function         000000A0 R  text 
sub_ascii_numbers       00000000 RG text 
subtract_loop           00000058 R  text 
